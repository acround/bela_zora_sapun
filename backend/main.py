import os
import json
import hmac
import hashlib
from urllib.parse import unquote, parse_qs
from flask import Flask, request, jsonify, send_from_directory
from telegram import Bot
import asyncio

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
# –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
# –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Ö—Ä–∞–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω –ø—Ä—è–º–æ –≤ –∫–æ–¥–µ!
BOT_TOKEN = os.environ.get('BOT_TOKEN')
if not BOT_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ (BOT_TOKEN) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ Telegram –±–æ—Ç–∞
app = Flask(__name__)
bot = Bot(token=BOT_TOKEN)

@app.route('/')
def serve_index():
    return send_from_directory(app.static_folder, 'index.html')

@app.route('/<path:path>')
def serve_static(path):
    return send_from_directory(app.static_folder, path)

@app.route('/process-order', methods=['POST'])
def process_order():
    # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ (–≤–∞—à–∞ –≤–µ—Ä—Å–∏—è –∑–¥–µ—Å—å)
    return jsonify({"status": "success"})

# --- –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram WebApp ---
def is_valid_init_data(init_data: str, bot_token: str) -> (bool, dict):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä–æ–∫—É initData, –ø–æ–ª—É—á–µ–Ω–Ω—É—é –æ—Ç Telegram WebApp.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂: (—è–≤–ª—è—é—Ç—Å—è –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã–º–∏, —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).
    """
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–ø—Ä–æ—Å–∞
        parsed_data = parse_qs(init_data)
        received_hash = parsed_data.pop('hash', [None])[0]

        if not received_hash:
            return False, {}

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: –≤—Å–µ –ø–æ–ª—è —Å–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∏ –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è.
        data_check_string = "\n".join(
            f"{k}={v[0]}" for k, v in sorted(parsed_data.items())
        )

        # –í—ã—á–∏—Å–ª—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
        secret_key = hmac.new(
            "WebAppData".encode(), bot_token.encode(), hashlib.sha256
        ).digest()

        # –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à –æ—Ç —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        calculated_hash = hmac.new(
            secret_key, data_check_string.encode(), hashlib.sha256
        ).hexdigest()

        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ö–µ—à–∏. –ï—Å–ª–∏ –æ–Ω–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ª–∏–Ω–Ω—ã–µ.
        if calculated_hash == received_hash:
            # –î–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_data = json.loads(unquote(parsed_data.get('user', ['{}'])[0]))
            return True, user_data
        
        return False, {}

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return False, {}


# --- API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤ ---
@app.route('/process-order', methods=['POST'])
def process_order():
    data = request.json
    init_data = data.get('initData')
    order_data = data.get('orderData')

    if not init_data or not order_data:
        return jsonify({"error": "initData or orderData is missing"}), 400

    is_valid, user_data = is_valid_init_data(init_data, BOT_TOKEN)

    if not is_valid:
        return jsonify({"error": "initData is invalid"}), 403

    try:
        user_id = user_data.get('id')
        user_name = user_data.get('first_name', '–£–≤–∞–∂–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç')

        items = order_data.get('items', {})
        total = order_data.get('total', 0)

        product_names = {
            1: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ –∫–æ–∑—å–µ –º–æ–ª–æ–∫–æ",
            2: "–û–≤—Å—è–Ω–∫–∞ –∏ –º–µ–¥",
            3: "–õ–∞–≤–∞–Ω–¥–æ–≤–æ–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ",
            4: "–£–≥–æ–ª—å–Ω—ã–π –¥–µ—Ç–æ–∫—Å"
        }

        message_lines = [
            f"üéâ –°–ø–∞—Å–∏–±–æ, {user_name}! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç.",
            "---",
            "–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:"
        ]

        for product_id, quantity in items.items():
            pid = int(product_id)
            name = product_names.get(pid, f"–¢–æ–≤–∞—Ä #{pid}")
            message_lines.append(f"‚Ä¢ {name} x {quantity}")

        message_lines.append("---")
        message_lines.append(f"–ò—Ç–æ–≥–æ: {total} RSD")
        message_lines.append("–ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏.")

        final_message = "\n".join(message_lines)

        async def send_confirmation():
            await bot.send_message(chat_id=user_id, text=final_message)

        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å Flask event loop
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(send_confirmation())
        loop.close()

        return jsonify({"status": "success", "message": "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â—ë–Ω!"}), 200

    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ]: {e}")
        return jsonify({"error": "Internal server error"}), 500

# –≠—Ç–æ—Ç –±–ª–æ–∫ –Ω—É–∂–µ–Ω –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ù–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è Gunicorn.
# if __name__ == 'main':
    # app.run(debug=True, port=5001)
